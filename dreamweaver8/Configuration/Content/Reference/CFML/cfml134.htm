<html>
<head>
<link href="mmres://user_interface_reference.css" rel="stylesheet" type="text/css">
<title>CFTREEITEM</title>
</head>
<body bgcolor="#FFFFFF" text="#000000">
   <div id="Description">
   <table cellpadding="0" cellspacing="0" border="0" width="100%" class="main">
      <tr> 
         <td valign="top" class="name">CFTREEITEM</td>
         <td valign="top" nowrap class="compatibility">&nbsp;</td>
      </tr>
      <tr>
         <td colspan="2" class="divider"><img src="dwres:18084" width="100%" height="1"></td>
      </tr>


    </td>
  </tr>
  <tr>
    <td valign="top" colspan="2" class="description"><span class="title">Description</span>
<p>
Populates a form tree control, created with the cftree tag, with one or more elements. 
</p>
    </td>
  </tr>
  <tr>
    <td valign="top" colspan="2" class="CLEARSEPARATION">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" colspan="2" class="description"><span class="title">Category</span>
<p>
Forms tags
</p>
  <tr>
    <td valign="top" colspan="2" class="CLEARSEPARATION">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" colspan="2" class="syntax"><span class="title">Syntax</span><pre>&lt;cftreeitem 
   value = &quot;text&quot;
   display = &quot;text&quot;
   parent = &quot;parent_name&quot;
   img = &quot;filename&quot;
   imgopen = &quot;filename&quot;
   href = &quot;URL&quot;
   target = &quot;URL_target&quot;
   query = &quot;queryname&quot;
   queryAsRoot = &quot;yes&quot; or &quot;no&quot;
   expand = &quot;yes&quot; or &quot;no&quot;&gt;
</pre>    </td>
  </tr>
  <tr>
    <td valign="top" colspan="2" class="CLEARSEPARATION">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" colspan="2" class="description"><span class="title">See also</span>
<p>
cfapplet, cfform, cfformgroup, cfformitem, cfgrid, cfinput, cfselect, cfslider, cftextarea, cftree; "Building tree controls with the cftree tag" in Chapter&#160;27, "Building Dynamic Forms with cfform Tags," in ColdFusion MX Developer's Guide
</p>
<table>
  <tr valign="top">
    <td width="30"><strong>Note: </strong></td>
    <td>In XML format, ColdFusion MX passes all attributes to the XML. The supplied XSLT skins do not handle or display XML format trees, but do display applet and Flash format trees.</td>
  </tr>
</table>
<p>

</p>
    </td>
  </tr>
  <tr>
    <td valign="top" colspan="2" class="CLEARSEPARATION">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" colspan="2" class="description"><span class="title">Usage</span>
<p>
This tag requires the client to download a Java applet. Downloading an applet takes time; therefore, using this tag might be slightly slower than using an HTML form element or the cfinput tag to get the same information. 
</p>

<p>
For this tag to work properly. the browser must be JavaScript-enabled. 
</p>

<p>
If you do not use a query to populate this tag, it creates a single tree item. If you do use a query, it creates multiple items; each row of the query creates a hierarchically nested set of items with one item per column.
</p>
    </td>
  </tr>
  <tr>
    <td valign="top" colspan="2" class="CLEARSEPARATION">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" colspan="2" class="description"><span class="title">Example</span>
<p>
The following example creates a simple tree using a single cftreeitem tag and a query:
</p>
<pre>&lt;cfform action = &quot;#cgi.script_name#&quot;&gt;
   &lt;cftree name = &quot;Employees&quot; height = &quot;400&quot; width = &quot;200&quot;&gt;
      &lt;cftreeitem value=&quot;LastName, FirstName, Emp_ID&quot; query=&quot;getEmployees&quot;
       queryAsRoot=&quot;False&quot;&gt;
   &lt;/cftree&gt;
&lt;/cfform&gt;
</pre>
<p>
The following example creates a tree that shows the basic information about all employees in an organization, organized by department. The departments are expanded to show all employees. You can click the + signs to display additional information. If you click the employee name, ColdFusion links back to the same page and displays the selected employee's ID.
</p>
<pre>&lt;!--- Query the datasource to get employee information.---&gt;
&lt;!--- Group the output by Department. 
   (All fields are required in Group By clause.) ---&gt;
&lt;cfquery name = &quot;GetEmployees&quot; dataSource = &quot;cfdocexamples&quot;&gt;
   SELECT Emp_ID, FirstName, LastName, EMail, Phone, Department
   FROM Employees 
   GROUP BY Department, Emp_ID, FirstName, LastName, EMail, Phone
&lt;/cfquery&gt;
&lt;html&gt;
&lt;body&gt;
&lt;h3&gt;cftreeitem Example&lt;/h3&gt;

&lt;!--- The following runs if the user clicked on a link in the tree. 
   A complete application would use the ID for additional processing. ---&gt;
&lt;cfif isdefined(&quot;URL.user_ID&quot;)&gt;
   &lt;cfoutput&gt;
      &lt;!--- URL.cftreeitemkey is the selected tree item&#39;s value attribute. ---&gt;
      You Requested information on #URL.cftreeitemKey#; User ID #URL.user_ID#
   &lt;/cfoutput&gt;
   &lt;br&gt;&lt;br&gt;
&lt;/cfif&gt;
&lt;!--- Display the tree. The cftree tag must be in a cfform. ---&gt;
&lt;cfform&gt;
   &lt;cftree name = &quot;Employees&quot; height = &quot;400&quot; width = &quot;200&quot; 
      font = &quot;Arial Narrow&quot; highlighthref=&quot;No&quot; hscroll=&quot;No&quot;&gt; 
      &lt;!--- cfoutput tag with a group attribute loops over the departments. ---&gt;
      &lt;cfoutput group=&quot;Department&quot; query = &quot;GetEmployees&quot;&gt;
         &lt;cftreeitem value=&quot;#Department#&quot; parent=&quot;Employees&quot; expand=&quot;yes&quot;&gt;
         &lt;!--- This cfoutput tag loops over the records for the department.
               The cfoutput tag does not need any attributes. ---&gt;
         &lt;cfoutput&gt;
            &lt;!--- Create an item for each employee in the department.
               Do not expand children. Each employee name links to this page,
               and sends the employee ID in the query string.---&gt;
            &lt;cftreeitem value = &quot;#LastName#, #FirstName#&quot; 
               display = &quot;#LastName#, #FirstName#&quot;
               parent = &quot;#Department#&quot; expand=&quot;no&quot;
               href=&quot;#cgi.script_name#?user_id=#emp_id#&quot;&gt;
            &lt;!--- Each Employee entry has ID and ContactInfo children. ---&gt;
            &lt;cftreeitem value = &quot;#Emp_ID#&quot; display = &quot;Employee ID: #Emp_ID#&quot; 
               parent = &quot;#LastName#, #FirstName#&quot;&gt;
            &lt;!--- Each node must be unique value, so use Emp_ID om value. ---&gt;
            &lt;cftreeitem value = &quot;#Emp_ID#_ContactInfo&quot; 
               display = &quot;Contact Information&quot; 
               parent = &quot;#LastName#, #FirstName#&quot; expand = &quot;No&quot;&gt;
            &lt;!--- ContactInfo has two children. ---&gt;
            &lt;cftreeitem value = &quot;#Phone#&quot; parent = &quot;#Emp_ID#_ContactInfo&quot;&gt;
            &lt;cftreeitem value = &quot;#Email#&quot; parent = &quot;#Emp_ID#_ContactInfo&quot;&gt;
         &lt;/cfoutput&gt;
      &lt;/cfoutput&gt;
   &lt;/cftree&gt;
&lt;/cfform&gt;
</pre>
         </td>
      </tr>
   </table>
   </div>
<div id="VALUE">
<table border="0" cellspacing="0" cellpadding="0" width="100%">
<tr>  
<td valign="top" class="name">VALUE</td>
  <td valign="top" nowrap class="compatibility">&nbsp;</td>
  </tr>
  <tr>
  <td colspan="2" class="divider"><img src="dwres:18084" width="100%" height="1"></td>
  </tr>

  <tr>
  <td valign="top" class="syntax">&nbsp;</td>
  <td valign="top" nowrap class="requirements">Required;</td>
  </tr>
  <tr>
  <td colspan="2" class="clearseparation">&nbsp;</td>
  </tr>
  <tr>
  <td valign="top" colspan="2" class="description">
  <tr>
  <td valign="top" class="syntax">&nbsp;</td>
  <td valign="top" nowrap class="requirements">All</td>
  </tr>
  <tr>
  <td colspan="2" class="clearseparation">&nbsp;</td>
  </tr>
  <tr>
  <td valign="top" colspan="2" class="description">



<p>Value passed when cfform is submitted. When populating a tree with data from a cfquery, you can specify multiple columns to use in a delimited list; for example, value = &quot;dept_id,emp_id&quot;. In this case, each column generates an item that is a child of the column that precedes it in the list.</p>

  </td>
  </tr>
  </table>
</div>
<div id="DISPLAY">
<table border="0" cellspacing="0" cellpadding="0" width="100%">
<tr>  
<td valign="top" class="name">DISPLAY</td>
  <td valign="top" nowrap class="compatibility">&nbsp;</td>
  </tr>
  <tr>
  <td colspan="2" class="divider"><img src="dwres:18084" width="100%" height="1"></td>
  </tr>

  <tr>
  <td valign="top" class="syntax">&nbsp;</td>
  <td valign="top" nowrap class="requirements">Optional;</td>
  </tr>
  <tr>
  <td colspan="2" class="clearseparation">&nbsp;</td>
  </tr>
  <tr>
  <td valign="top" colspan="2" class="description">
  <tr>
  <td valign="top" class="syntax">&nbsp;</td>
  <td valign="top" nowrap class="requirements">All</td>
  </tr>
  <tr>
  <td colspan="2" class="clearseparation">&nbsp;</td>
  </tr>
  <tr>
  <td valign="top" colspan="2" class="description">

<strong>Default value:</strong> "value"


<p>Tree item label. When populating a tree with data from a query, specify names in a delimited list. Example: display = &quot;dept_name,emp_name&quot;</p>

  </td>
  </tr>
  </table>
</div>
<div id="PARENT">
<table border="0" cellspacing="0" cellpadding="0" width="100%">
<tr>  
<td valign="top" class="name">PARENT</td>
  <td valign="top" nowrap class="compatibility">&nbsp;</td>
  </tr>
  <tr>
  <td colspan="2" class="divider"><img src="dwres:18084" width="100%" height="1"></td>
  </tr>

  <tr>
  <td valign="top" class="syntax">&nbsp;</td>
  <td valign="top" nowrap class="requirements">Optional;</td>
  </tr>
  <tr>
  <td colspan="2" class="clearseparation">&nbsp;</td>
  </tr>
  <tr>
  <td valign="top" colspan="2" class="description">
  <tr>
  <td valign="top" class="syntax">&nbsp;</td>
  <td valign="top" nowrap class="requirements">All</td>
  </tr>
  <tr>
  <td colspan="2" class="clearseparation">&nbsp;</td>
  </tr>
  <tr>
  <td valign="top" colspan="2" class="description">



<p>Value of the tree item parent. Determines the item's placement in the tree hierarchy. If omitted, the item is placed at the tree root level, or if the queryAsRoot attribute is True, directly under the query.</p>

  </td>
  </tr>
  </table>
</div>
<div id="IMG">
<table border="0" cellspacing="0" cellpadding="0" width="100%">
<tr>  
<td valign="top" class="name">IMG</td>
  <td valign="top" nowrap class="compatibility">&nbsp;</td>
  </tr>
  <tr>
  <td colspan="2" class="divider"><img src="dwres:18084" width="100%" height="1"></td>
  </tr>

  <tr>
  <td valign="top" class="syntax">&nbsp;</td>
  <td valign="top" nowrap class="requirements">Optional;</td>
  </tr>
  <tr>
  <td colspan="2" class="clearseparation">&nbsp;</td>
  </tr>
  <tr>
  <td valign="top" colspan="2" class="description">
  <tr>
  <td valign="top" class="syntax">&nbsp;</td>
  <td valign="top" nowrap class="requirements">Applet, object</td>
  </tr>
  <tr>
  <td colspan="2" class="clearseparation">&nbsp;</td>
  </tr>
  <tr>
  <td valign="top" colspan="2" class="description">

<strong>Default value:</strong> "folder"


<p>Image name, filename, or file URL for tree item icon. </p>
<p>The following values are provided:</p><ul>

<li>cd</li>

<li>computer</li>

<li>document</li>

<li>element</li>

<li>folder</li>

<li>floppy</li>

<li>fixed</li>

<li>remote</li>
</ul>

<p>You can also specify a custom image. To do so, include path and file extension; for example: </p>
<p>img = &quot;../images/page1.gif&quot;</p>
<p>Custom images are not supported for Flash format.</p>
<p>To specify more than one image in a tree, or an image at the second or subsequent level, use commas to separate names, corresponding to level; for example:</p>
<p>img = &quot;folder,document&quot;</p>
<p>img = &quot;,document&quot; (example of second level)</p>

  </td>
  </tr>
  </table>
</div>
<div id="IMGOPEN">
<table border="0" cellspacing="0" cellpadding="0" width="100%">
<tr>  
<td valign="top" class="name">IMGOPEN</td>
  <td valign="top" nowrap class="compatibility">&nbsp;</td>
  </tr>
  <tr>
  <td colspan="2" class="divider"><img src="dwres:18084" width="100%" height="1"></td>
  </tr>

  <tr>
  <td valign="top" class="syntax">&nbsp;</td>
  <td valign="top" nowrap class="requirements">Optional;</td>
  </tr>
  <tr>
  <td colspan="2" class="clearseparation">&nbsp;</td>
  </tr>
  <tr>
  <td valign="top" colspan="2" class="description">
  <tr>
  <td valign="top" class="syntax">&nbsp;</td>
  <td valign="top" nowrap class="requirements">Applet, object</td>
  </tr>
  <tr>
  <td colspan="2" class="clearseparation">&nbsp;</td>
  </tr>
  <tr>
  <td valign="top" colspan="2" class="description">



<p>Icon displayed with open tree item, as describe for the img attribute.</p>

  </td>
  </tr>
  </table>
</div>
<div id="HREF">
<table border="0" cellspacing="0" cellpadding="0" width="100%">
<tr>  
<td valign="top" class="name">HREF</td>
  <td valign="top" nowrap class="compatibility">&nbsp;</td>
  </tr>
  <tr>
  <td colspan="2" class="divider"><img src="dwres:18084" width="100%" height="1"></td>
  </tr>

  <tr>
  <td valign="top" class="syntax">&nbsp;</td>
  <td valign="top" nowrap class="requirements">Optional;</td>
  </tr>
  <tr>
  <td colspan="2" class="clearseparation">&nbsp;</td>
  </tr>
  <tr>
  <td valign="top" colspan="2" class="description">
  <tr>
  <td valign="top" class="syntax">&nbsp;</td>
  <td valign="top" nowrap class="requirements">All</td>
  </tr>
  <tr>
  <td colspan="2" class="clearseparation">&nbsp;</td>
  </tr>
  <tr>
  <td valign="top" colspan="2" class="description">



<p>URL to link to if the user clicks the tree item. If you use a query attribute, the href attribute can specify a query column that contains URLs. If href is not a query column, the attribute text must be a URL or list of URLs. </p>
<p>When populating a tree with data from a query, specify the URLs in a comma-delimited list; for example:</p>
<p>href = &quot;http://dept_svr,http://emp_svr&quot;</p>

  </td>
  </tr>
  </table>
</div>
<div id="TARGET">
<table border="0" cellspacing="0" cellpadding="0" width="100%">
<tr>  
<td valign="top" class="name">TARGET</td>
  <td valign="top" nowrap class="compatibility">&nbsp;</td>
  </tr>
  <tr>
  <td colspan="2" class="divider"><img src="dwres:18084" width="100%" height="1"></td>
  </tr>

  <tr>
  <td valign="top" class="syntax">&nbsp;</td>
  <td valign="top" nowrap class="requirements">Optional;</td>
  </tr>
  <tr>
  <td colspan="2" class="clearseparation">&nbsp;</td>
  </tr>
  <tr>
  <td valign="top" colspan="2" class="description">
  <tr>
  <td valign="top" class="syntax">&nbsp;</td>
  <td valign="top" nowrap class="requirements">All</td>
  </tr>
  <tr>
  <td colspan="2" class="clearseparation">&nbsp;</td>
  </tr>
  <tr>
  <td valign="top" colspan="2" class="description">



<p>Target attribute of href URL. When populating a tree with data from a query, specify target in delimited list:</p>
<p>target = &quot;FRAME_BODY,_blank&quot;</p>

  </td>
  </tr>
  </table>
</div>
<div id="QUERY">
<table border="0" cellspacing="0" cellpadding="0" width="100%">
<tr>  
<td valign="top" class="name">QUERY</td>
  <td valign="top" nowrap class="compatibility">&nbsp;</td>
  </tr>
  <tr>
  <td colspan="2" class="divider"><img src="dwres:18084" width="100%" height="1"></td>
  </tr>

  <tr>
  <td valign="top" class="syntax">&nbsp;</td>
  <td valign="top" nowrap class="requirements">Optional;</td>
  </tr>
  <tr>
  <td colspan="2" class="clearseparation">&nbsp;</td>
  </tr>
  <tr>
  <td valign="top" colspan="2" class="description">
  <tr>
  <td valign="top" class="syntax">&nbsp;</td>
  <td valign="top" nowrap class="requirements">Applet,</td>
  </tr>
  <tr>
  <td colspan="2" class="clearseparation">&nbsp;</td>
  </tr>
  <tr>
  <td valign="top" colspan="2" class="description">
  <tr>
  <td valign="top" class="syntax">&nbsp;</td>
  <td valign="top" nowrap class="requirements">Flash</td>
  </tr>
  <tr>
  <td colspan="2" class="clearseparation">&nbsp;</td>
  </tr>
  <tr>
  <td valign="top" colspan="2" class="description">



<p>Query name to use to populate the treeitem. ColdFusion generates an item for each field value in the query column list specified by the value attribute. The fields in each row are hierarchically linked to the first column.</p>

  </td>
  </tr>
  </table>
</div>
<div id="QUERYASROOT">
<table border="0" cellspacing="0" cellpadding="0" width="100%">
<tr>  
<td valign="top" class="name">QUERYASROOT</td>
  <td valign="top" nowrap class="compatibility">&nbsp;</td>
  </tr>
  <tr>
  <td colspan="2" class="divider"><img src="dwres:18084" width="100%" height="1"></td>
  </tr>

  <tr>
  <td valign="top" class="syntax">&nbsp;</td>
  <td valign="top" nowrap class="requirements">Optional;</td>
  </tr>
  <tr>
  <td colspan="2" class="clearseparation">&nbsp;</td>
  </tr>
  <tr>
  <td valign="top" colspan="2" class="description">
  <tr>
  <td valign="top" class="syntax">&nbsp;</td>
  <td valign="top" nowrap class="requirements">All</td>
  </tr>
  <tr>
  <td colspan="2" class="clearseparation">&nbsp;</td>
  </tr>
  <tr>
  <td valign="top" colspan="2" class="description">

<strong>Default value:</strong> "Yes"


<p>Applies only if you specify a query attribute. Defines the query as the root level for all items generated by this tag. This attribute enables you to avoid creating a parent cftreeitem.</p><ul>

<li>Yes: generates a parent (root) item for all other items generated by the tag, with the query name as its value; if you specify a parent attribute, the root item is a child of the specified parent.</li>

<li>No: uses the item specified by the parent attribute as the immediate parent of all items generated by this tag. If there is no parent attribute, use the query as the parent.</li>

<li>A string: creates a root item and uses the specified string as the item name; if you specify a parent attribute, the root item is a child of the specified parent.</li>
</ul>


  </td>
  </tr>
  </table>
</div>
<div id="EXPAND">
<table border="0" cellspacing="0" cellpadding="0" width="100%">
<tr>  
<td valign="top" class="name">EXPAND</td>
  <td valign="top" nowrap class="compatibility">&nbsp;</td>
  </tr>
  <tr>
  <td colspan="2" class="divider"><img src="dwres:18084" width="100%" height="1"></td>
  </tr>

  <tr>
  <td valign="top" class="syntax">&nbsp;</td>
  <td valign="top" nowrap class="requirements">Optional;</td>
  </tr>
  <tr>
  <td colspan="2" class="clearseparation">&nbsp;</td>
  </tr>
  <tr>
  <td valign="top" colspan="2" class="description">
  <tr>
  <td valign="top" class="syntax">&nbsp;</td>
  <td valign="top" nowrap class="requirements">All</td>
  </tr>
  <tr>
  <td colspan="2" class="clearseparation">&nbsp;</td>
  </tr>
  <tr>
  <td valign="top" colspan="2" class="description">

<strong>Default value:</strong> "Yes"

<ul>

<li>Yes: expands tree to show tree item children.</li>

<li>No: keeps tree item collapsed.</li>
</ul>


  </td>
  </tr>
  </table>
</div>

  </body>
</html>
