<html>
<head>
<link href="mmres://user_interface_reference.css" rel="stylesheet" type="text/css">
<title>CFLOCK</title>
</head>
<body bgcolor="#FFFFFF" text="#000000">
   <div id="Description">
   <table cellpadding="0" cellspacing="0" border="0" width="100%" class="main">
      <tr> 
         <td valign="top" class="name">CFLOCK</td>
         <td valign="top" nowrap class="compatibility">&nbsp;</td>
      </tr>
      <tr>
         <td colspan="2" class="divider"><img src="dwres:18084" width="100%" height="1"></td>
      </tr>


    </td>
  </tr>
  <tr>
    <td valign="top" colspan="2" class="description"><span class="title">Description</span>
<p>
Ensures the integrity of shared data. Instantiates the following kinds of locks:
</p>

<p>
<b>Exclusive</b>&#160;Allows single-thread access to the CFML constructs in its body. The tag body can be executed by one request at a time. No other requests can start executing code within the tag while a request has an exclusive lock. ColdFusion issues exclusive locks on a first-come, first-served basis.
</p>

<p>
<b>Read-only</b>&#160;Allows multiple requests to access CFML constructs within the tag body concurrently. Use a read-only lock only when shared data is read and not modified. If another request has an exclusive lock on shared data, the new request waits for the exclusive lock to be released.
</p>
    </td>
  </tr>
  <tr>
    <td valign="top" colspan="2" class="CLEARSEPARATION">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" colspan="2" class="description"><span class="title">Category</span>
<p>
Application framework tags
</p>
  <tr>
    <td valign="top" colspan="2" class="CLEARSEPARATION">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" colspan="2" class="syntax"><span class="title">Syntax</span><pre>&lt;cflock 
   timeout = &quot;timeout in seconds &quot;
   scope = &quot;Application&quot; or &quot;Server&quot; or &quot;Session&quot;
   name = &quot;lockname&quot; 
   throwOnTimeout = &quot;yes&quot; or &quot;no&quot;
   type = &quot;readOnly&quot; or &quot;exclusive &quot;&gt; 
   &lt;!--- CFML to be synchronized ---&gt; 
&lt;/cflock&gt;
</pre>    </td>
  </tr>
  <tr>
    <td valign="top" colspan="2" class="CLEARSEPARATION">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" colspan="2" class="description"><span class="title">See also</span>
<p>
cfapplication, cfassociate, cfmodule, Chapter&#160;15, "Using Persistent Data and Locking" in ColdFusion MX Developer's Guide
</p>

<p>

</p>
<table>
  <tr valign="top">
    <td width="30"><strong>Note: </strong></td>
    <td>Limit the scope of code that updates shared data structures, files, and CFXs. Exclusive locks are required to ensure the integrity of updates, but read-only locks are faster. In a performance-sensitive application, substitute read-only locks for exclusive locks where possible; for example, when reading shared data.</td>
  </tr>
</table>    </td>
  </tr>
  <tr>
    <td valign="top" colspan="2" class="CLEARSEPARATION">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" colspan="2" class="description"><span class="title">Usage</span>
<p>
ColdFusion&#160;MX is a multithreaded server; it can process multiple page requests at a time. Use the cflock tag for these purposes:
</p>
<ul>

<li>To ensure that modifications to shared data and objects made in concurrently executing requests occur sequentially.</li>

<li>Around file manipulation constructs, to ensure that file updates do not fail because files are open for writing by other applications or tags.</li>

<li>Around CFX invocations, to ensure that ColdFusion can safely invoke CFXs that are not implemented in a thread-safe manner. (This applies only to CFXs developed in C++.) </li>
</ul>

<p>
To work safely with ColdFusion, a C++ CFX that maintains and manipulates shared (global) data structures must be made thread-safe; however, this requires advanced knowledge. You can use a CFML custom tag wrapper around a CFX to make its invocation thread-safe.
</p>

<p>
When you display, set, or update variables in a shared scope, use the scope attribute to identify the scope as Server, Application or Session.
</p>
    </td>
  </tr>
  <tr>
    <td valign="top" colspan="2" class="CLEARSEPARATION">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" colspan="2" class="description"><span class="title"></span>
<p>
A deadlock is a state in which no request can execute the locked section of a page. Once a deadlock occurs, neither user can break it, because all requests to the protected section of the page are blocked until the deadlock can be resolved by a lock timeout.
</p>

<p>
The cflock tag uses kernel level synchronization objects that are released automatically upon timeout and/or the abnormal termination of the thread that owns them. Therefore, while processing a cflock tag, ColdFusion never deadlocks for an infinite period of time. However, very large timeouts can block request threads for long periods, and radically decrease throughput. To prevent this, always use the minimum timeout value.
</p>

<p>
Another cause of blocked request threads is inconsistent nesting of cflock tags and inconsistent naming of locks. If you nest locks, everyone accessing the locked variables must consistently nest cflock tags in the same order. Otherwise, a deadlock can occur. 
</p>

<p>
These examples show situations that cause deadlocks:
</p>

<p>
</p><div align="left">
<table border="1">
  <caption></caption>
  <tr align="center">    <th colspan="2" rowspan="1">&#160;</th>
</tr>
  <tr align="center">    <th>&#160;</th>
    <th>&#160;</th>
</tr>
  <tr align="left">    <td>
<p>Locks the session scope.</p></td>
    <td>
<p>Locks the Application scope.</p></td>
</tr>
  <tr align="left">    <td>
<p>Deadlock: Tries to lock the Application scope, but it is already locked by User 2.</p></td>
    <td>
<p>Deadlock: Tries to lock the Session scope, but it is already locked by User 1.</p></td>
</tr>
</table>
</div>
<p>
</p>

<p>
The following deadlock could occur if you tried to nest an exclusive lock inside a read lock: 
</p>

<p>
</p><div align="left">
<table border="1">
  <caption></caption>
  <tr align="center">    <th>&#160;</th>
</tr>
  <tr align="center">    <th>&#160;</th>
</tr>
  <tr align="left">    <td>
<p>Locks the Session scope with a read lock.</p></td>
</tr>
  <tr align="left">    <td>
<p>Attempts to lock the Session scope with an exclusive lock. </p></td>
</tr>
  <tr align="left">    <td>
<p>Deadlock: Cannot lock the Session scope with an exclusive lock because the scope is already locked for reading.</p></td>
</tr>
</table>
</div>
<p>
</p>

<p>
The following code shows this scenario:
</p>
<pre>&lt;cflock timeout = &quot;60&quot; scope = &quot;SESSION&quot; type = &quot;readOnly&quot;&gt;
   ...............
   &lt;cflock timeout = &quot;60&quot; scope = &quot;SESSION&quot; type = &quot;Exclusive&quot;&gt;
   .........
   &lt;/cflock&gt;
&lt;/cflock&gt;
</pre>
<p>
To avoid a deadlock, everyone who nests locks must do so in a well-specified order and name the locks consistently. If you must lock access to the Server, Application, and Session scopes, you must do so in this order:
</p>
<ol type="1">

<li>Lock the Session scope. In the cflock tag, specify scope = &quot;session&quot;.</li>

<li>Lock the Application scope. In the cflock tag, specify scope = &quot;Application&quot;.</li>

<li>Lock the Server scope. In the cflock tag, specify scope = &quot;server&quot;.</li>

<li>Unlock the Server scope.</li>

<li>Unlock the Application scope.</li>

<li>Unlock the Session scope.</li>
</ol>
<table>
  <tr valign="top">
    <td width="30"><strong>Note: </strong></td>
    <td>If you do not have to lock a scope, you can skip any pair of these lock/unlock steps. For example, if you do not have to lock the Server scope, you can skip Steps 3 and 4. Similar rules apply for named locks.</td>
  </tr>
</table>
<p>
For more information, see the following:
</p>
<ul>

<li>Chapter&#160;15, "Using Persistent Data and Locking" in ColdFusion MX Developer's Guide </li>

<li>Article #20370, ColdFusion Locking Best Practices, on the Macromedia website at www.macromedia.com/support/service/</a> </li>
</ul>
    </td>
  </tr>
  <tr>
    <td valign="top" colspan="2" class="CLEARSEPARATION">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" colspan="2" class="description"><span class="title">Example</span><pre>&lt;!--- This example shows how cflock can guarantee consistency of data updates
to variables in the Application, Server, and Session scopes. ---&gt;

&lt;!---&#160;Copy the following code into an Application.cfm file in the application
      root directory. ---&gt;
&lt;!----------------&#160;&#160;&#160;Beginning of Application.cfm code&#160;&#160;&#160;---------------&gt;
&lt;!--- cfapplication defines scoping for a ColdFusion application and 
enables or disables storing of application and session variables.
Put this tag in a special file called Application.cfm. 
It is run before any other ColdFusion page in its directory. ---&gt;

&lt;!--- Enable session management for this application. ---&gt;
&lt;cfapplication name = &quot;ETurtle&quot; 
   sessionTimeout = #CreateTimeSpan(0,0, 0, 60)# 
   sessionManagement = &quot;yes&quot;&gt;

&lt;!--- Initialize session and application variables used by E-Turtleneck. 
Use session scope for the session variables. ---&gt; 
&lt;cflock scope = &quot;Session&quot; 
   timeout = &quot;30&quot; type = &quot;Exclusive&quot;&gt;
   &lt;cfif NOT IsDefined(&quot;session.size&quot;)&gt;
      &lt;cfset session.size = &quot;&quot;&gt;
   &lt;/cfif&gt;
   &lt;cfif NOT IsDefined(&quot;session.color&quot;)&gt;
      &lt;cfset session.color = &quot;&quot;&gt;
   &lt;/cfif&gt;
&lt;/cflock&gt;

&lt;!--- Use an application lock for the application-wide variable that
      keeps track of the number of turtlenecks sold.
      For a more efficient, but more complex, way of handling Application scope
      locking, see &quot;ColdFusion MX Developer's Guide&quot;---&gt;
&lt;cflock scope = &quot;Application&quot;       timeout = &quot;30&quot; type = &quot;Exclusive&quot;&gt;
   &lt;cfif NOT IsDefined(&quot;application.number&quot;)&gt;
      &lt;cfset application.number = 0&gt;
   &lt;/cfif&gt;
&lt;/cflock&gt;

&lt;!----------------------- End of Application.cfm -----------------------&gt;    

&lt;h3&gt;cflock Example&lt;/h3&gt;

&lt;cfif IsDefined(&quot;form.submit&quot;)&gt;
&lt;!--- The form has been submitted; process the request. ---&gt;
   &lt;cfoutput&gt;
      Thanks for shopping E-Turtleneck. You chose size &lt;b&gt;#form.size#&lt;/b&gt;, 
      color &lt;b&gt;#form.color#&lt;/b&gt;.&lt;br&gt;&lt;br&gt;
   &lt;/cfoutput&gt;

&lt;!--- Lock the code that assigns values to session variables. ----&gt; 
   &lt;cflock scope = &quot;Session&quot; timeout = &quot;30&quot; type = &quot;Exclusive&quot;&gt;
      &lt;cfparam name = session.size Default = #form.size#&gt;
      &lt;cfparam name = session.color Default = #form.color#&gt;
   &lt;/cflock&gt;

&lt;!---- Lock the code that updates the Application scope number of 
      turtlenecks sold. ---&gt; 
   &lt;cflock scope = &quot;Application&quot; timeout = &quot;30&quot; type = &quot;Exclusive&quot;&gt;
      &lt;cfset application.number = application.number + 1&gt;
   &lt;cfoutput&gt;
      E-Turtleneck has now sold #application.number# turtlenecks!
   &lt;/cfoutput&gt;
   &lt;/cflock&gt;

&lt;cfelse&gt;
&lt;!--- Show the form only if it has not been submitted. ---&gt;
   &lt;cflock scope = &quot;Application&quot; timeout = &quot;30&quot; type = &quot;Readonly&quot;&gt;
      &lt;cfoutput&gt;
         E-Turtleneck has sold #application.number# turtlenecks to date.
      &lt;/cfoutput&gt;
   &lt;/cflock&gt;

   &lt;form method=&quot;post&quot; action=&quot;cflocktest.cfm&quot;&gt;
      &lt;p&gt;Congratulations! You selected the most comfortable turtleneck in the 
world.
      Please select color and size.&lt;/p&gt; 
      &lt;table cellspacing = &quot;2&quot; cellpadding = &quot;2&quot; border = &quot;0&quot;&gt;
         &lt;tr&gt;
            &lt;td&gt;Select a color.&lt;/td&gt;
            &lt;td&gt;&lt;select type = &quot;Text&quot; name = &quot;color&quot;&gt;
                  &lt;option&gt;red
                  &lt;option&gt;white
                  &lt;option&gt;blue
                  &lt;option&gt;turquoise
                  &lt;option&gt;black
                  &lt;option&gt;forest green
               &lt;/select&gt;
            &lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Select a size.&lt;/td&gt;
            &lt;td&gt;&lt;select type = &quot;Text&quot; name = &quot;size&quot; &gt;
                  &lt;option&gt;XXsmall
                  &lt;option&gt;Xsmall
                  &lt;option&gt;small
                  &lt;option&gt;medium
                  &lt;option&gt;large
                  &lt;option&gt;Xlarge
               &lt;/select&gt;
            &lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Press Submit when you are finished making your selection.&lt;/td&gt;
            &lt;td&gt;&lt;input type = &quot;Submit&quot; name = &quot;submit&quot; value = &quot;Submit&quot;&gt; &lt;/td&gt;
         &lt;/tr&gt;
      &lt;/table&gt;
   &lt;/form&gt;
&lt;/cfif&gt;
</pre>
         </td>
      </tr>
   </table>
   </div>
<div id="TIMEOUT">
<table border="0" cellspacing="0" cellpadding="0" width="100%">
<tr>  
<td valign="top" class="name">TIMEOUT</td>
  <td valign="top" nowrap class="compatibility">&nbsp;</td>
  </tr>
  <tr>
  <td colspan="2" class="divider"><img src="dwres:18084" width="100%" height="1"></td>
  </tr>

  <tr>
  <td valign="top" class="syntax">&nbsp;</td>
  <td valign="top" nowrap class="requirements">Required</td>
  </tr>
  <tr>
  <td colspan="2" class="clearseparation">&nbsp;</td>
  </tr>
  <tr>
  <td valign="top" colspan="2" class="description">



<p>Maximum length of time, in seconds, to wait to obtain a lock. If lock is obtained, tag execution continues. Otherwise, behavior depends on throwOnTimeout attribute value. If you set timout=&quot;0&quot;, the timeout is determined by the &quot;Timeout Requests after x&quot; setting in the ColdFusion MX Administrator Settings page, if that setting is enabled. However, if the setting is not enabled, and you set timeout=&quot;0&quot;, ColdFusion can wait indefinitely to obtain the lock.</p>

  </td>
  </tr>
  </table>
</div>
<div id="SCOPE">
<table border="0" cellspacing="0" cellpadding="0" width="100%">
<tr>  
<td valign="top" class="name">SCOPE</td>
  <td valign="top" nowrap class="compatibility">&nbsp;</td>
  </tr>
  <tr>
  <td colspan="2" class="divider"><img src="dwres:18084" width="100%" height="1"></td>
  </tr>

  <tr>
  <td valign="top" class="syntax">&nbsp;</td>
  <td valign="top" nowrap class="requirements">Optional</td>
  </tr>
  <tr>
  <td colspan="2" class="clearseparation">&nbsp;</td>
  </tr>
  <tr>
  <td valign="top" colspan="2" class="description">



<p>Lock scope. Mutually exclusive with the name attribute. Lock name. Only one request in the specified scope can execute the code within this tag (or within any other cflock tag with the same lock scope) at a time. </p><ul>

<li>Application</li>

<li>Server</li>

<li>Session</li>
</ul>


  </td>
  </tr>
  </table>
</div>
<div id="NAME">
<table border="0" cellspacing="0" cellpadding="0" width="100%">
<tr>  
<td valign="top" class="name">NAME</td>
  <td valign="top" nowrap class="compatibility">&nbsp;</td>
  </tr>
  <tr>
  <td colspan="2" class="divider"><img src="dwres:18084" width="100%" height="1"></td>
  </tr>

  <tr>
  <td valign="top" class="syntax">&nbsp;</td>
  <td valign="top" nowrap class="requirements">Optional</td>
  </tr>
  <tr>
  <td colspan="2" class="clearseparation">&nbsp;</td>
  </tr>
  <tr>
  <td valign="top" colspan="2" class="description">



<p>Lock name. Mutually exclusive with the scope attribute. Only one request can execute the code within a cflock tag with a given name at a time. Cannot be an empty string.</p>
<p>Permits synchronizing access to resources from different parts of an application. Lock names are global to a ColdFusion server. They are shared among applications and user sessions, but not clustered servers.</p>

  </td>
  </tr>
  </table>
</div>
<div id="THROWONTIMEOUT">
<table border="0" cellspacing="0" cellpadding="0" width="100%">
<tr>  
<td valign="top" class="name">THROWONTIMEOUT</td>
  <td valign="top" nowrap class="compatibility">&nbsp;</td>
  </tr>
  <tr>
  <td colspan="2" class="divider"><img src="dwres:18084" width="100%" height="1"></td>
  </tr>

  <tr>
  <td valign="top" class="syntax">&nbsp;</td>
  <td valign="top" nowrap class="requirements">Optional</td>
  </tr>
  <tr>
  <td colspan="2" class="clearseparation">&nbsp;</td>
  </tr>
  <tr>
  <td valign="top" colspan="2" class="description">

<strong>Default value:</strong> "yes"


<p>How timeout conditions are handled:</p><ul>

<li>yes: exception is generated for the timeout.</li>

<li>no: execution continues past this tag.</li>
</ul>


  </td>
  </tr>
  </table>
</div>
<div id="TYPE">
<table border="0" cellspacing="0" cellpadding="0" width="100%">
<tr>  
<td valign="top" class="name">TYPE</td>
  <td valign="top" nowrap class="compatibility">&nbsp;</td>
  </tr>
  <tr>
  <td colspan="2" class="divider"><img src="dwres:18084" width="100%" height="1"></td>
  </tr>

  <tr>
  <td valign="top" class="syntax">&nbsp;</td>
  <td valign="top" nowrap class="requirements">Optional</td>
  </tr>
  <tr>
  <td colspan="2" class="clearseparation">&nbsp;</td>
  </tr>
  <tr>
  <td valign="top" colspan="2" class="description">

<strong>Default value:</strong> "Exclusive"

<ul>

<li>readOnly: lets more than one request read shared data.</li>

<li>exclusive: lets one request read or write shared data.</li>
</ul>


  </td>
  </tr>
  </table>
</div>

  </body>
</html>
