<html>
<head>
<link href="mmres://user_interface_reference.css" rel="stylesheet" type="text/css">
<title>CFLOOP: LOOPING OVER A COM COLLECTION OR STRUCTURE</title>
</head>
<body bgcolor="#FFFFFF" text="#000000">
   <div id="Description">
   <table cellpadding="0" cellspacing="0" border="0" width="100%" class="main">
      <tr> 
         <td valign="top" class="name">CFLOOP: LOOPING OVER A COM COLLECTION OR STRUCTURE</td>
         <td valign="top" nowrap class="compatibility">&nbsp;</td>
      </tr>
      <tr>
         <td colspan="2" class="divider"><img src="dwres:18084" width="100%" height="1"></td>
      </tr>


    </td>
  </tr>
  <tr>
    <td valign="top" colspan="2" class="description"><span class="title">Description</span>
<p>
The cfloop collection attribute loops over every object within a COM/DCOM collection object, or every element in a structure: 
</p>
<ul>

<li>A COM/DCOM collection object is a set of similar items referenced as a group. For example, the group of open documents in an application is a collection.</li>

<li>A structure contains a related set of items, or it can be used as an associative array. Looping is particularly useful when using a structure as an associative array.</li>
</ul>

<p>
In the loop, each item is referenced by the variable name in the item attribute. The loop executes until all items have been accessed.
</p>

<p>
The collection attribute is used with the item attribute. In the example that follows, item is assigned a variable called file2, so that with each cycle in the cfloop, each item in the collection is referenced. In the cfoutput section, the name property of the file2 item is referenced for display.
</p>

<p>
For more information, see Chapter&#160;38, "Integrating COM and CORBA Objects in CFML Applications," in ColdFusion MX Developer's Guide.
</p>
    </td>
  </tr>
  <tr>
    <td valign="top" colspan="2" class="CLEARSEPARATION">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" colspan="2" class="description"><span class="title">Example</span>
<p>
This example uses a COM object to output a list of files. In this example, FFunc is a collection of file2 objects.
</p>
<pre>&lt;cfobject 
   class = FileFunctions.files 
   name = FFunc 
   action = Create&gt; 
&lt;cfset FFunc.Path = &quot;c:\&quot;&gt; 
&lt;cfset FFunc.Mask = &quot;*.*&quot; &gt; 
&lt;cfset FFunc.attributes = 16 &gt; 
&lt;cfset x = FFunc.GetFileList()&gt; 
&lt;cfloop collection = #FFUNC# item = &quot;file2&quot;&gt; 
   &lt;cfoutput&gt;      #file2.name# &lt;br&gt;    &lt;/cfoutput&gt; 
&lt;/cfloop&gt;
&lt;!---Loop through a structure that is used as an associative array: ---&gt;
...&lt;!--- Create a structure and loop through its contents. ---&gt;
&lt;cfset Departments = StructNew()&gt;
&lt;cfset val = StructInsert(Departments, &quot;John &quot;, &quot;Sales &quot;)&gt;
&lt;cfset val = StructInsert(Departments, &quot;Tom &quot;, &quot;Finance &quot;)&gt;
&lt;cfset val = StructInsert(Departments, &quot;Mike &quot;, &quot;Education &quot;)&gt;
&lt;!--- Build a table to display the contents ---&gt;
&lt;cfoutput&gt;
&lt;table cellpadding = &quot;2 &quot; cellspacing = &quot;2 &quot;&gt;
   &lt;tr&gt;
      &lt;td&gt;&lt;b&gt;Employee&lt;/b&gt;&lt;/td&gt;
      &lt;td&gt;&lt;b&gt;Dept.&lt;/b&gt;&lt;/td&gt;
   &lt;/tr&gt;
&lt;!--- Use item to create the variable person to hold value of key 
as loop runs. ---&gt;
&lt;cfloop collection = #Departments# item = &quot;person &quot;&gt;
   &lt;tr&gt;
      &lt;td&gt;#person#&lt;/td&gt;
      &lt;td&gt;#StructFind(Departments, person)#&lt;/td&gt;
   &lt;/tr&gt;
&lt;/cfloop&gt;
&lt;/table&gt;
&lt;/cfoutput&gt;
</pre>
<p>

</p>

         </td>
      </tr>
   </table>
   </div>

  </body>
</html>
